; ----------------------------------------------------------------------
; Utility routines for processing blocks
; ----------------------------------------------------------------------

; Get the address of the next block
;
; Entry:
;   HL      Address of block
;
; Exit:
;   A       Corrupt
;   Z       true if no last block
;   HL      Address of next block, 0 if no more
;
nextBlock:      CALL    lastBlock           ; Check we are the last block
                RET     Z                   ; we are
                LD      A, (HL)             ; LD HL, (HL)
                INC     HL
                LD      H, (HL)
                LD      L, A                ; HL now next address
                ; run into lastBlock to set Z

; Check HL points to a block
;
; Entry:
;   HL      Address of block or 0 if none
;
; Exit:
;   A       Corrupt
;   Z       true if no last block
;   HL      Unchanged
;
lastBlock:      LD      A, H                ; Z true if HL is the last block
                OR      L
                RET

; Count the number of blocks
;
; Entry:
;   HL      Address of block to start
;
; Exit:
;   A       Corrupt
;   BC      Number of blocks
;   HL      Unchanged
;
countBlocks:
#local
                LD      BC, 0               ; Reset count
                CALL    lastBlock           ; Do nothing if at end
                RET     Z
l1:             INC     BC
                CALL    nextBlock
                JR      NZ, l1
                RET
#endlocal

firstBlock:     LD      HL, 0x6000
                RET

; Find next DEP block
findDep:        LD      D, 'D'              ; STN record
                JR      findNext

findFirst:      CALL    firstBlock
findNext:
#local
l1:             PUSH    HL              ; IX=HL
                POP     IX

                LD      A, (IX+2)       ; Block len
                CP      1               ; Must have 1 byte to be valid
                JR      C, nextB        ; Block too short

                LD      A, (IX+4)       ; Test char 1
                CP      D
                RET     Z               ; Prefix found

nextB:          CALL    nextBlock       ; Next block
                JR      NZ, l1          ; Loop until end

end:            LD      A, 1            ; Clear Z
                OR      A
                RET
#endlocal

; Find a named block
;
; Entry:
;   DE      2 char prefix
;   HL      starting block
;
; Exit:
;   Z       true if found
;   HL      Address of found block, invalid if not found
;   IX      As HL
;
findBlockStart: CALL    firstBlock
findBlock:
#local
                CALL    lastBlock       ; Test if last block
                JR      Z, end          ; All done

l1:             PUSH    HL              ; IX=HL
                POP     IX

                LD      A, (IX+2)       ; Block len
                CP      2               ; For this type we must have 2 bytes for the prefix
                JR      C, nextB        ; Block too short

                LD      A, (IX+4)       ; Test char 1
                CP      D
                JR      NZ, nextB       ; Failed char 1

                LD      A, (IX+5)       ; Test char 2
                CP      E
                RET     Z               ; Prefix found

nextB:          CALL    nextBlock       ; Next block
                JR      NZ, l1          ; Loop until end

end:            LD      A, 1            ; Clear Z
                OR      A
                RET
#endlocal

; findStation - finds first station record
; nextStation - finds next station record
;
; Entry:
;   D       first char of tiploc index
;   E       second char
;
; Exit:
;   Z       true if found
;   HL      address of tiploc block if found
;   DE      corrupt
;   IX      preserved
;
findStation:    CALL    firstBlock
                LD      D, 'S'              ; STN record
                JP      findBlock

; Find tiploc
;
; Entry:
;   D       first char of tiploc index
;   E       second char
;
; Exit:
;   Z       true if found
;   HL      address of tiploc block if found
;   DE      corrupt
;   IX      preserved
;
findTiploc:     CALL    firstBlock
                LD      D, 'T'
                JP      findBlock

; Find tiploc name
;
; Entry:
;   D       first char of tiploc index
;   E       second char
;
; Exit:
;   Z       true if found
;   HL      address of name if found
;   DE      corrupt
;   IX      preserved
;
findTiplocName:
                PUSH    IX
                CALL    findTiploc
getBlockText:
#local
                JR      NZ, getBlockText2
                PUSH    IX                  ; Point HL to tiploc name
                POP     HL
                LD      DE, 6               ; Tiploc name
                ADD     HL, DE
                JR      getBlockText1
getBlockText2:  LD      HL, 0
getBlockText1:  POP     IX
                RET
#endlocal

; Find tiploc name
;
; Entry:
;   DE      reason code
;
; Exit:
;   Z       true if found
;   HL      address of name if found
;   DE      corrupt
;   IX      preserved
;
findReason:     PUSH    IX
                LD      D, 'R'
                CALL    findBlockStart
                JR      getBlockText
