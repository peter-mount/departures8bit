; ----------------------------------------------------------------------
; Handles common UI features
; ----------------------------------------------------------------------

; Get string length
;
; Entry:
;   HL      string terminated with 0
;
; Exit:
;   A       0
;   B       string length
;   HL      Byte after string null
;
strLen:
#local
            LD  B, 0                    ; Get string length in B
strLen1:    LD  A,(HL)
            INC HL
            AND A
            RET Z
            INC B
            JR strLen1
#endlocal

; Clear screen with our title at the top left of screen
cls:
#local
            LD      HL, clsTxt
            JP      writeString
clsTxt:     defb    12, 134, "departureboards.mobi", 13, 10, 0
#endlocal

; CLS then show centered title double height, blue background
;
; Entry:
;   HL      Title text
;
; Exit:
;   HL      Byte after title text null
;   A       Corrupt
;   BC      Corrupt
;   DE      Corrupt
;
header:
#local
            PUSH    HL                  ; copy for lower title line
            PUSH    HL                  ; copy for upper title line
            PUSH    HL                  ; copy for strlen
            CALL    cls
            LD      HL, hdrTxt          ; Show blue double height
            CALL    writeString

            POP     HL                  ; Get top left of header text
            CALL    strLen              ; into BC
            LD      A, 40
            SUB     B
            SRA     A
            LD      C, A                ; C = (40-b)/2
            LD      B, 1

            PUSH    BC                  ; Move cursor preserving BC
            CALL    teletextSetPos      ; so it's available for the
            POP     BC                  ; lower line

            POP     HL                  ; Write top line
            CALL    writeString

            INC     B                   ; Write lower line
            CALL    teletextSetPos
            POP     HL
            JP      writeString

hdrTxt:     defb    31,0,1,132,157,135,141  ; Blue double height text
            defb    13,10,132,157,135,141,0
#endlocal

; Shows the * prompt on top row clearing the line
;
; Exit:
;   A       Corrupt
;   HL      Corrupt
;   Cursor  at row 0 col 25
showPrompt:
#local
            LD      HL, text
            JP      writeString
text:       defb 31,22,0,131,'*',135,'               ',31,25,0,0
#endlocal

clearPrompt:
#local
            LD      HL, text
            JP      writeString
text:       defb 31,22,0,130,'                 ',31,23,0,0
#endlocal

; Clear prompt area and show string
showPromptText:
            PUSH    HL
            CALL    clearPrompt
            POP     HL
            JP      writeString

; Get next key press
;
; Interrupts must be enabled as this relies on the system
; doing the decoding of the keyboard.
;
; If break is pressed during the call then the application
; will restart.
;
; Exit:
;   A       Key read
;   Carry   set
;   BC      corrupt
;   HL      corrupt
;
getKey:
            CALL    flashCursor     ; Flash cursor at current position
            LD      BC, 25          ; Timeout after 0.5s
            CALL    getKeyTimeout   ; Get key
            RET     C               ; Exit as we have a key
            JP      Z, main         ; Break restarts application
            JR      getKey          ; Loop back as timeout is for the cursor

; Get a key press. This will wait BC jiffies for a key press.
; It will return with the character in A and C set or with
; C reset then Z for break pressed and NZ for timeout.
;
; Interrupts must be enabled as this relies on the system
; doing the decoding of the keyboard.
;
; Entry:
;   BC      Delay in frames
;
; Exit:
;   A       Key read if not a break
;   Z       reset
;   HL      corrupt
;
; On break:     C clear, Z set
; On timeout:   C clear, Z clear
; On key:       C set
;
getKeyTimeout:
#local
            LD      HL, 0           ; Convert BC to frames remaining
            CCF
            SBC     HL, BC

            DI                      ; Disable interrupts
            LD      (0x5C78), HL    ; Set lower 2 bytes of FRAMES counter
            LD      A, 0xFF         ; Set upper byte to 0xFF
            LD      (0x5C7A), A
            EI                      ; Enable interrupts, FRAMES now counting down

            LD      HL, 23560       ; LAST_K system variable
            LD      (HL), 0         ; Reset variable
l1:         CALL    testBreak       ; Test for break key
            JR      C, l2           ; Break not being pressed

            LD      A, 0            ; Set Z to indicate break pressed
            JR      lc

l2:         LD      A, (HL)         ; Get value
            OR      A
            JR      NZ, le          ; Character found

            LD      A, (0x5C7A)     ; 3rd byte of FRAMES counter
            BIT     7, A            ; If set then we haven't rolled over yet
            JR      NZ, l1          ; Loop as not yet rolled over

            LD      A, 1            ; Clear Z
lc:         OR      A               ; Common exit with carry clear
            CCF                     ; Clear carry
            RET

le:         SCF                     ; Mark as valid key found
            RET
#endlocal

; Test for break key
;
; Exit:
;   Carry   reset if break, set if no-break
;   A       Corrupt
;
testBreak:  LD      A, 0x7F         ; Test for Break key, first space
            IN      A, (0xFE)
            RRA
            RET     C               ; Space not pressed
            LD      A, 0xFE         ; Test for Break key, first space
            IN      A, (0xFE)
            RRA
            RET

; Convert A into upper case
;
; Entry:
;   A       ASCII value to convert
;
; Exit:
;   A       Unchanged unless 'a'..'z' then returns 'A'..'Z'
;
toUpper:    CP      'a'
            RET     C
            CP      'z'+1
            RET     NC
            XOR     32
            RET

; Write a 0 prefixed 2 digit decimal number
;
; Entry:
;   A       Value to display
;
; Exit:
;   A       Corrupt
;   B       Corrupt
;
showDecimal:
#local
                LD      B, 0                ; Set tens as 0
sd0:            CP      10                  ; If less than 0
                JR      C, sd1              ; skip to display tens digit
                INC     B                   ; Inc B, sub 10 from A
                SUB     10
                JR      sd0                 ; Loop for next test
sd1:            PUSH    AF                  ; Save unit
                LD      A, '0'              ; Display tens, add ascii to B
                ADD     B
                CALL    oswrch              ; Display
                POP     AF                  ; Restore unit
                ADD     '0'                 ; convert to ascii
                JR      osw                 ; display
#endlocal

; New line
;
; Exit:
;   A       Corrupt
;
backdown1:      CALL    backspace   ; Move back & down 1 char - see menu
                JR      linefeed
newline:        LD      A, 13       ; Start new line so CR, LF
                CALL    oswrch
linefeed:       LD      A, 10       ; Move down 1 char
                JR      osw
backspace:      LD      A, 8        ; Move left 1 char
                JR      osw
space:          LD      A, 32       ; Space
                JR      osw
redText:        LD      A, 129      ; Teletext Red
                JR      osw
greenText:      LD      A, 130      ; Teletext Green
                JR      osw
yellowText:     LD      A, 131      ; Teletext Yellow
                JR      osw
whiteText:      LD      A, 135      ; Teletext White
osw:            JP      oswrch      ; Shortcut so we can use JR

tab:            LD      A, 31       ; VDU 31, b, c
                CALL    oswrch
                LD      A, B
                CALL    oswrch
                LD      A, C
                JR      osw

; Flash Cursor, will alternate between _ and ' ' at current position
flashCursor:
#local
                LD      HL, cursorState
                INC     (HL)
                BIT     0, (HL)
                JR      NZ, l1
                CALL    space
                JR      backspace
l1:             LD      A, 0xF0
                CALL    oswrch
                JR      backspace
cursorState:    defb    1
#endlocal
