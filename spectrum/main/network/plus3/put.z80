; ----------------------------------------------------------------------
; Plus 3 RS232 routines
; ----------------------------------------------------------------------
p3Put:
#local
        PUSH    HL          ; Save registers before call
        PUSH    BC
        CALL    L0D07
        POP     BC
        POP     HL
        RET

L0D07:  push	af

        ld	c,$fd
        ld	d,$ff
        ld	e,$bf
        ld	b,d
        ld	a,14
        out	(c),a	; AY reg. to control the RS232 port.

brkcheck:
    ;	call  zx_break
    ;	jr    c,nobreak
    ;
    ;	ld	hl,RS_ERR_BREAK
    ;	ret
    ;
    ;.nobreak

            IN   A,(C)        ; Read status of data register.
            AND  $40          ; %01000000. Test the DTR line.
            JR   NZ,brkcheck     ; Jump back until device is ready for data.

            LD   HL,(BAUD)    ; $5B5F. HL=Baud rate timing constant.
rs232_patch2:
            LD   DE,$0002     ;
            OR   A            ;
            SBC  HL,DE        ;
            EX   DE,HL        ; DE=(BAUD)-2.

            POP  AF           ; Retrieve the byte to send.
            CPL               ; Invert the bits of the byte (RS232 logic is inverted).
            SCF               ; Carry is used to send START BIT.
            LD   B,$0B        ; B=Number of bits to send (1 start + 8 data + 2 stop).

            DI                ; Disable interrupts to ensure accurate timing.

;Transmit each bit

L08E7:  PUSH BC           ; Save the number of bits to send.
        PUSH AF           ; Save the data bits.

        LD   A,$FE        ;
        LD   H,D          ;
        LD   L,E          ; HL=(BAUD)-2.
        LD   BC,$BFFD     ; AY-3-8912 data register.

        JP   NC,L08F9     ; Branch to transmit a 1 or a 0 (initially sending a 0 for the start bit).

;Transmit a 0

        AND  $F7          ; Clear the RXD (out) line.
        OUT  (C),A        ; Send out a 0 (high level).
        JR   L08FF        ; Jump ahead to continue with next bit.

;Transmit a 1

L08F9:  OR   8            ; Set the RXD (out) line.
        OUT  (C),A        ; Send out a 1 (low level).
        JR   L08FF        ; Jump ahead to continue with next bit.

;Delay the length of a bit

L08FF:  DEC  HL           ; (6) Delay 26*BAUD cycles.
        LD   A,H          ; (4)
        OR   L            ; (4)
        JR   NZ,L08FF     ; (12) Jump back until delay is completed.

        NOP               ; (4) Fine tune the timing.
        NOP               ; (4)
        NOP               ; (4)

        POP  AF           ; Retrieve the data bits to send.
        POP  BC           ; Retrieve the number of bits left to send.
        OR   A            ; Clear carry flag.
        RRA               ; Shift the next bit to send into the carry flag.
        DJNZ L08E7        ; Jump back to send next bit until all bits sent.

        EI                ; Re-enable interrupts.
;        RET               ; Return with carry and zero flags reset.





        LD      B,$0B           ; Set bit count to eleven - 1 + 8 + 2.

        CPL                     ; Invert the bits of the character.
        LD      C,A             ; Copy the character to C.

        LD      A,($5CC6)       ; Load A from System Variable IOBORD

        LD      A,$EF           ; Set to %11101111
        OUT     ($EF),A         ; Make CTS (Clear to Send) low.

        CPL                     ; reset bit 0 (other bits of no importance)
        OUT     ($F7),A         ; Make RXdata low. %00010000

        LD      HL,($5CC3)      ; Fetch value from BAUD System Variable.
        LD      D,H             ; Copy BAUD value to DE for count.
        LD      E,L             ;

L0D1C:  DEC     DE              ; ( 6) Wait 26 * BAUD cycles
        LD      A,D             ; ( 4)
        OR      E               ; ( 4)
        JR      NZ,L0D1C        ; (12) back to BD-DEL-1

L0D21:  IN      A,($EF)         ; Read the communication port.
        AND     $08             ; isolate DTR (Data Terminal Ready) bit.
        JR      Z,L0D21         ; back, until DTR found high, to TEST-DTR

        SCF                     ; Set carry flag as the start bit.
        DI                      ; Disable Interrupts.

L0D2C:  ADC     A,$00           ; Set bit 0            76543210 <- C
        OUT     ($F7),A         ; Send RXdata the start bit.

        LD      D,H             ; Transfer the BAUD value to DE for count.
        LD      E,L             ;

L0D32:  DEC     DE              ; ( 6) Wait for 26 * BAUD
        LD      A,D             ; ( 4)
        OR      E               ; ( 4)
        JR      NZ,L0D32        ; (12) back to BD-DEL-2

        DEC     DE              ; ( 6)
        XOR     A               ; ( 4) clear rxdata bit
        SRL     C               ;      shift a bit of output byte to carry.
        DJNZ    L0D2C           ; back for 11 bits to SER-OUT-L

;   Note the last two bits will have been sent reset as C is exhausted.

        EI                      ; Enable Interrupts.

        LD      A,$01           ; Set RXdata

        LD      C,$EF           ; prepare port address.
        LD      B,$EE           ; prepare value %11101110
        OUT     ($F7),A         ; Send RXdata high.
        OUT     (C),B           ; Send CTS and comms data low - switch off RS232

L0D48:  DEC     HL              ; ( 6) The final 26 * BAUD delay
        LD      A,L             ; ( 4)
        OR      H               ; ( 4)
        JR      NZ,L0D48        ; (12) back to BD-DEL-3
        RET

#endlocal
