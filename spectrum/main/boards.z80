; ----------------------------------------------------------------------
; Display station departures
; ----------------------------------------------------------------------

#include "../../teletextspectrum/teletext.inc"

#local

; Clear display and show the departure screen for the station in the
; result
clsStation:
                LD      D, 'S'              ; Find sole Station record
                CALL    findFirst
                JR      Z, cls0

                LD      HL, searchHeader    ; Should not happen, use dummy title
                JR      d1

cls0:           LD      A, (IX+5)           ; Station tiploc
                LD      (dispStation), A    ; Save copy for later
                LD      E, A                ; Now search for the tiploc
                CALL    findTiplocName
                JR      Z, cls1             ; Found so display full name

                PUSH    IX                  ; LD HL,IX
                POP     HL
                LD      DE, 6               ; use CRS as fallback
                ADD     HL, DE
cls1:           CALL    header              ; CLS & display station name

                LD      HL, headers         ; Display column headers
                JP      writeString

; Entry point to set the CRS of the station before retrieval
crsDepartures:: LD      DE, test + 7        ; Copy CRS
                LD      BC, 3
                LDIR

; Entry point to retrieve the current station's departures
departures::    LD      HL, searchHeader
                CALL    header              ; Clear screen & show header

dReload:        LD      A, (refreshDelay)   ; Set refreshDelay
                ADD     A                   ; convert to 0.5s
                LD      (refreshCounter),A

                LD      HL, searchText      ; Show searching
                CALL    showPromptText

                LD      HL, crsText         ; Show CRS
                CALL    writeString

                LD      HL, test            ; Send search command with pattern
                CALL    networkSend

                LD      HL, 0x6000          ; Get result
                CALL    networkGetBlock

; Entry point with preloaded stations
d0:             XOR     A                   ; Reset serviceId of first service to
                LD      (serviceId), A      ; be displayed

                CALL    clsStation          ; Clear screen & show station name
                CALL    setTopRow           ; Start top row

d1:             CALL    getDeparture        ; Find current service
                JR      NZ, k1              ; Not found so wait on keyboard

d2:             CALL    displayDep          ; Display it

                LD      A, (depRow)         ; Have we reached the bottom of the screen?
                CP      topRow+16           ;
                JR      C, d1               ; Not full so loop to next departure

k1:             CALL    showPrompt          ; So we have somewhere for the cursor

                LD      A, (delayScreen)    ; Get page delay
                ADD     A                   ; double as timeout is 0.5s
                LD      B, A                ; We use B here

k1_1:           PUSH    BC                  ; Save counter as getKeyFlash uses BC
                CALL    getKeyFlash
                POP     BC

                OR      A                   ; A=0 on timeout
                JR      NZ, k2              ; We have a key

                LD      A, (refreshCounter) ; Decrement refreshCounter
                DEC     A
                JR      Z, dReload          ; Reload the data when it expires
                LD      (refreshCounter),A  ; Save new value of refreshCounter

                DJNZ    k1_1                ; Loop until counter expires

                CALL    getDeparture        ; Get next departure
                JP      NZ, d0              ; No more so start from the start
                PUSH    IX                  ; Save IX as we need it for display
                CALL    clsStation          ; Clear screen & show station name
                CALL    setTopRow
                POP     IX                  ; restore top departure
                JR      d2                  ; now show it

k2:             RET                         ; TODO handle keyboard

setTopRow:      LD      A, topRow           ; Reset depRow with top of display
                LD      (depRow), A
                RET

getDeparture:   LD      D, 'D'              ; Find current service
                LD      HL, serviceId       ; Get serviceId into E
                LD      E, (HL)
                INC     (HL)                ; Move to next serviceId
                JP      findBlockStart

displayDep:     LD      E, (IX+18)          ; Get destination tiploc
                LD      A, (dispStation)    ; Compare against the station
                CP      E
                JR      NZ, dd0             ; Not terminating here

                LD      A, (showTerminate)  ; Check showTerminate
                OR      A
                RET     Z                   ; Do nothing if we are not showing them

dd0:            LD      A, (depRow)         ; Get row
                LD      B, A                ; Copy to B
                ADD     2                   ; Increment for next row
                LD      (depRow), A         ; Update

                LD      C, 0                ; Top row of double height text
                CALL    dd1
                INC     B                   ; Replicate for bottom row
dd1:            PUSH    BC
                CALL    teletextSetPos
                LD      A, 141
                CALL    oswrch

                LD      A, (IX+6)           ; Planned dep Hour
                CALL    showDecimal
                LD      A, (IX+7)           ; Planned dep Minute
                CALL    showDecimal

                CALL    space               ; Extra space to avoid colour clash

                PUSH    IX                  ; Save IX as we need a tiploc
                LD      E, (IX+18)          ; Get destination tiploc
                LD      A, (dispStation)    ; Compare against the station
                CP      E
                JR      NZ, dd1_a           ; Not the station so lookup name

                CALL    greenText
                LD      HL, termHere        ; Use term here string
                JR      dd1_b

dd1_a:          CALL    findTiplocName
                JR      NZ, dd2
                CALL    whiteText
dd1_b:          CALL    writeString         ; Write it
dd2:            POP     IX                  ; Restore IX to departure record

                POP     BC                  ; Platform
                PUSH    BC
                PUSH    HL                  ; Save HL
                LD      C, 30
                CALL    teletextSetPos
                LD      A, 135
                CALL    oswrch
                PUSH    IX
                POP     HL
                LD      DE, 0x0C            ; Offset of platform
                ADD     HL, DE
                LD      B, 4
                CALL    wstrb
                POP     HL                  ; Restore HL

                LD      A, (IX+0x19)        ; Look at delayed time MSB
                OR      A
                JR      Z, dd2_OT           ; On time
                RRA                         ; Look at sign
                JR      NC, dd2_Early       ; Negative delay so early

                CALL    redText             ; Red for delayed
                JR      dd3

dd2_OT:         CALL    whiteText           ; White for on time
                JR      dd3

dd2_Early:      CALL    greenText           ; Green for early

dd3:            LD      A, (IX+9)           ; Expt Hour
                CALL    showDecimal
                LD      A, (IX+10)          ; Expt Minute
                CALL    showDecimal

dd4:            POP     BC
                RET

searchText:     defb    "Searching...", 0
searchHeader:   defb    "Departures", 0
headers:        defb    31,5,3,131,141,"Destination",31,31,3,"Plat Expt"
                defb    31,5,4,131,141,"Destination",31,31,4,"Plat Expt"
                defb    0
termHere:       defb    "Terminates here", 0
test:           defb    "depart "
crsText:        defb    "chx", 10, 0

topRow:         equ     5           ; Row of start of display

dispStation:    defb    0           ; Tiploc of this station
serviceId:      defb    0           ; ID of service being displayed
depRow:         defb    0           ; Row on screen
refreshCounter: defb    0           ; counter used for timer
#endlocal
